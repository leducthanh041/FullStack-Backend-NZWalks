###### 021 Understanding Dependency Injection & Injecting DbContext Into Our Application
vào program tạo services 

builder.Services.AddDbContext<NZWalksDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("NZWalksConnectionString")));
	+ Note: "NZWalksConnectionString" được lấy từ file appsettings.json (đã được tạo kết nối tới database local:host trước đó)

###### 022 Run EF Core Migrations (automatically generate database on SQL Server)
- Step 1: tools -> NuGet package manager -> Package Manager Console
- Step 2: using `Add-Migration "Name of Migration"` to create database (folder named `Migrations` will be appeared on VS)
- Step 3: using `Update-Database` to update database on SQL Server

###### 025 Create New Controller (Regions Controller)
folder Controllers -> create a controller -> define methods -> return value of methods

###### CRUD method
define methods in Controller -> create dto in DTO folder -> in dto file, define attributes that can be updated

###### 007 Implement Automapper
add package: dependencies -> manage nuget package -> type "automapper"

###### 002 Seeding Data Using Entity Framework Core
to create Guid: View -> Other window -> C# Interactive

###### CRUD method (now for another route)
- Step 1: define methods in Controller
- Step 2: create dto to map DTO to Domain Model in DTO folder (in dto file, define attributes that can be updated)
- Step 3: create automapper in Mappings
- Step 4: create "constructor" (ctor) in "controller" (remember push "ctrl + ." to create "fields")
- Step 5: now Map DTO to Domain model in methods
- Step 6: create repository (This should be created first, instead of creating methods first in controller, but It's ok)
- Step 7: create concrete implementation: SQL"Name"Repository, inheretance from INTERFACE, create "constructor" (ctor) for dbContext (remember push "ctrl + ." to create "fields")
- Step 8: remember to inject in program.cs file
- Step 9: In file controller, define an INTERFACE parameter for ctor
- Step 10: Create a DTO to map domain model to dto, remember to create a new Map in AutoMapper
- Step 11: Now complete methods in controller